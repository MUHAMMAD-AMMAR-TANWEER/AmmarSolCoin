// First I need to do necessary imports 

import { initializeKeypair } from "./initializeKeypair"
import * as web3 from "@solana/web3.js"
import * as token from "@solana/spl-token"
import {
  Metaplex,
  keypairIdentity,
  bundlrStorage,
  toMetaplexFile,
  findMetadataPda,
} from "@metaplex-foundation/js"
import {
  DataV2,
  createCreateMetadataAccountV2Instruction,
  createUpdateMetadataAccountV2Instruction,
} from "@metaplex-foundation/mpl-token-metadata"
import * as fs from "fs"
import { createAssociatedTokenAccount, createAssociatedTokenAccountInstruction, createInitializeMintInstruction, createMintToInstruction, MINT_SIZE, TOKEN_PROGRAM_ID } from "@solana/spl-token"



const tokenName = "AmmarCustom"
const description = "Another Token Generated by Ammar FOr AI"
const symbol = "AMAI"
const decimals = 2
const amount = 1000

async function main() { 

  const connection = new web3.Connection(web3.clusterApiUrl("devnet"))
  const user = await initializeKeypair(connection)
// get the public key
  console.log("PublicKey:", user.publicKey.toBase58())

  //get minimum lamports for wallet to avoide rent
  const lamports = await token.getMinimumBalanceForRentExemptAccount(connection)

  //generate new key pair for systemProgram

  const mintPair =  web3.Keypair.generate()
  
  //get metadata PDA for token mint
  const metadataPDA = await findMetadataPda(mintPair.publicKey)

  //get associate token account
  const tokenATA = await token.getAssociatedTokenAddress(mintPair.publicKey,user.publicKey)
  
//meta plex setup

  const metaplex = Metaplex.make(connection)
    .use(keypairIdentity(user))
    .use(
      bundlrStorage({
        address: "https://devnet.bundlr.network",
        providerUrl: "https://api.devnet.solana.com",
        timeout: 60000,
      })
    )

  const buffer = fs.readFileSync("assets/AID.png")
  const file = toMetaplexFile(buffer, "AID.png")
  const imageUri = await metaplex.storage().upload(file)
  console.log("image uri:", imageUri)

    const { uri } = await metaplex
    .nfts()
    .uploadMetadata({
      name: tokenName,
      description: description,
      image: imageUri,
    })

  console.log("metadata uri:", uri)


    const tokenMetadata = {
    name: tokenName,
    symbol: symbol,
    uri: uri,
    sellerFeeBasisPoints: 0,
    creators: null,
    collection: null,
    uses: null,
  } as DataV2


   const transaction = new web3.Transaction().add(

    //create new system account
    web3.SystemProgram.createAccount({
      fromPubkey: user.publicKey,
      newAccountPubkey: mintPair.publicKey,
      space:MINT_SIZE,
      lamports: lamports,
      programId:TOKEN_PROGRAM_ID
    }
    ),

    // create new token
       createInitializeMintInstruction(
    mintPair.publicKey,
    decimals,
    user.publicKey,
    user.publicKey,
    TOKEN_PROGRAM_ID,

   ),
   // create metadata account

   createCreateMetadataAccountV2Instruction({
        metadata: metadataPDA,
        mint: mintPair.publicKey,
        mintAuthority: user.publicKey,
        payer: user.publicKey,
        updateAuthority: user.publicKey,
   },
        {
        createMetadataAccountArgsV2: {
          data: tokenMetadata,
          isMutable: true,
        },
      }
   )
   )


   const createTokenAccountInstruction = createAssociatedTokenAccountInstruction(
    user.publicKey,
    tokenATA,
    user.publicKey,
    mintPair.publicKey,

   )

     let tokenAccount: token.Account
  try {
    // check if token account already exists
    tokenAccount = await token.getAccount(
      connection, // connection
      tokenATA // token address
    )
  } catch (error: unknown) {
    if (
      error instanceof token.TokenAccountNotFoundError ||
      error instanceof token.TokenInvalidAccountOwnerError
    ) {
      try {
        // add instruction to create token account if one does not exist
        transaction.add(createTokenAccountInstruction)
      } catch (error: unknown) {}
    } else {
      throw error
    }
  }


  transaction.add(
    createMintToInstruction(mintPair.publicKey, tokenATA,user.publicKey, amount * Math.pow(10, decimals))
  )


  const transactionSignature = await web3.sendAndConfirmTransaction(
    connection,
    transaction,
    [user, mintPair]
  )

    console.log(
    `Transaction: https://explorer.solana.com/tx/${transactionSignature}?cluster=devnet`
  )


}


main()
  .then(() => {
    console.log("Finished successfully")
    process.exit(0)
  })
  .catch((error) => {
    console.log(error)
    process.exit(1)
  })